#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        remetente = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
        membros = []
        for canal in servidor.channels.keys():
            if remetente in servidor.channels[canal]:
                servidor.channels[canal].remove(remetente)
                for x in servidor.channels[canal]:
                    membros.append(x)
                membros = list(set(membros))
        if membros:
            print('era membro')
            print(membros)
            print(servidor.nicks[membros[0]])
            for membro in membros:
                conection = servidor.nicks[membro]
                conection.enviar(b':' + remetente + b' QUIT ' + b':Connection closed\r\n')
        servidor.nicks.pop(remetente, None)
        return sair(conexao)

    delimiter = b'\r\n'
    s = [e for e in dados.split(delimiter)]

    for k in range(len(s)):
        if k == (len(s) -1):
            conexao.residual = conexao.residual + s[k]
            dado = conexao.residual
            if (not dado.endswith(b'\r\n')):
                break
        else:
            dado = conexao.residual + s[k] + b'\r\n'
        if dado.split(b' ')[0] == b'PING':
            conexao.enviar(b':server PONG server :'+dado.split(b' ',1)[1])
            conexao.residual = b''
        if dado.split(b' ')[0] == b'NICK':
            dado = dado.split(b'\r\n', 1)[0]
            novo_nome = dado.split(b' ',1)[1]
            if validar_nome(novo_nome):
                if novo_nome.lower() in [x.lower() for x in list(servidor.nicks.keys())]:
                    if conexao in list(servidor.nicks.values()):
                        nome_velho = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                        conexao.enviar(b':server 433 ' + nome_velho + b' ' + novo_nome+ b' :Nickname is already in use\r\n')
                    else:
                        conexao.enviar(b':server 433 * ' + novo_nome + b' :Nickname is already in use\r\n')
                
                else:
                    if conexao in list(servidor.nicks.values()):
                        nome_velho = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                        conexao.enviar(b':' + nome_velho + b' NICK ' + novo_nome + b'\r\n')
                        servidor.nicks.pop(nome_velho, None)
                        servidor.nicks[novo_nome] = conexao
                        
                    else:
                        conexao.enviar(b':server 001 ' + novo_nome + b' :Welcome\r\n')
                        conexao.enviar(b':server 422 ' + novo_nome + b' :MOTD File is missing\r\n')
                        servidor.nicks[novo_nome] = conexao
            else:
                conexao.enviar(b':server 432 * ' + dado.split(b' ',1)[1] + b' :Erroneous nickname\r\n')

            conexao.residual = b''
        if dado.split(b' ')[0] == b'PRIVMSG':
            dado = dado.split(b' ',1)[1]
            destinatario = dado.split(b' ')[0]
            if len(destinatario.split(b'#')) > 1:
                canal = destinatario.split(b'#',1)[1]

                if canal.lower() in [x.lower() for x in list(servidor.channels.keys())]:
                    canal = list(servidor.channels.keys())[[x.lower() for x in list(servidor.channels.keys())].index(canal.lower())]
                    remetente = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                    for membro in servidor.channels[canal]:
                        if membro != remetente:
                            conection = servidor.nicks[membro]
                            conection.enviar(b':' + remetente + b' PRIVMSG ' + b'#' + canal + b' ' + dado.split(b' ')[1])

            else:    
                if destinatario.lower() in [x.lower() for x in list(servidor.nicks.keys())]:
                    remetente = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                    conection = list(servidor.nicks.values())[[x.lower() for x in list(servidor.nicks.keys())].index(destinatario.lower())]
                    conection.enviar(b':' + remetente + b' PRIVMSG ' + destinatario + b' ' + dado.split(b' ')[1])


        if dado.split(b' ')[0] == b'JOIN':
            dado = dado.split(b' ')[1]

            if len(dado.split(b'#')) > 1:
                canal = dado.split(b'#',1)[1]
                canal = canal.split(b'\r\n',1)[0]
                if validar_nome(canal):
                    membro_novo = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                    if canal.lower() in [x.lower() for x in list(servidor.channels.keys())]:
                        canal_velho = list(servidor.channels.keys())[[x.lower() for x in list(servidor.channels.keys())].index(canal.lower())]
                        servidor.channels[canal_velho].append(membro_novo)
                        servidor.channels[canal_velho].sort()
                        lista_membros = servidor.channels[canal_velho]

                        for membro in servidor.channels[canal_velho]:
                            conection = servidor.nicks[membro]
                            conection.enviar(b':' + membro_novo + b' JOIN ' + b':' + b'#' + canal_velho + b'\r\n')
                        conexao.enviar(b':server 353 ' + membro_novo + b' = ' + b'#' + canal_velho + b' :' + b' '.join(lista_membros) + b'\r\n' )
                        conexao.enviar(b':server 366 ' + membro_novo + b' ' + b'#' + canal_velho + b' :End of /NAMES list.\r\n')
                    else:
                        servidor.channels[canal] = [membro_novo]
                        conexao.enviar(b':' + membro_novo + b' JOIN ' + b':' + b'#' + canal + b'\r\n')
                        lista_membros = servidor.channels[canal]
                        conexao.enviar(b':server 353 ' + membro_novo + b' = ' + b'#' + canal + b' :' + b' '.join(lista_membros) + b'\r\n')
                        conexao.enviar(b':server 366 ' + membro_novo + b' ' + b'#' + canal + b' :End of /NAMES list.\r\n')
   

                else:
                    conexao.enviar(b':server 403' + canal + b':No such channel\r\n')
            else:
                conexao.enviar(b':server 403' + dado + b':No such channel\r\n')
        if dado.split(b' ')[0] == b'PART':
            dado = dado.split(b' ',1)[1]
            canal = dado.split(b'#',1)[1]
            canal = canal.split(b'\r\n',1)[0]
            if len(canal.split(b' ')) >1:
                canal = canal.split(b' ')[0]
            print(canal)
            print(list(servidor.channels.keys()))
            if canal.lower() in [x.lower() for x in list(servidor.channels.keys())]:
                print('existe o canal)')
                canal = list(servidor.channels.keys())[[x.lower() for x in list(servidor.channels.keys())].index(canal.lower())]
                remetente = list(servidor.nicks.keys())[list(servidor.nicks.values()).index(conexao)]
                for membro in servidor.channels[canal]:
                        conection = servidor.nicks[membro]
                        conection.enviar(b':' + remetente + b' PART #' + canal + b'\r\n')
                servidor.channels[canal].remove(remetente)



        print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)
    conexao.residual = b''


servidor = Servidor(6667)
servidor.nicks = {}
servidor.channels = {}
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
